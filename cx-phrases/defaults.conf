{
    URL_SEPARATORS: [ "#", "/", ".", "_", "-" ]
    MATCH_URL_REGEX: "\\s\\w+\\.\\w+(?:[.\\/\\-]\\w+)*\\b"
    MATCH_PHONE_REGEX: "(\\b(\\d{3}-\\d{3}-\\d{4})\\b)|\\$(session\\.params|flow)\\.[^.]*?phone-number[^.]*?(?=[\\.\\,!?]*\\s)"
    MATCH_PERCENTAGE_REGEX: "\\b\\d+((\\.|,)\\d+)*\\s*%(?!\"|<)\\B"
    MATCH_NUMBERS_REGEX: "\\b(?<!\\d{3}-\\d{3}-)\\b\\d+\\b(?!-\\d{3}-\\d{4})(?!-\\d{1,4})(?!%\">|:|-|\\s[Gg])\\b"
    SHORT_TOKEN_WHITELIST: [ "com", "org" ]
    INVALID_CONSONANT_SEQUENCE: "\\b.*([^aeiouy]{5,}|[^aeiou][^aeiouy]{4,}[^aeiou]|[hjmnqvwxz]r|[cdfghjqvwxz]s|[dhjmnqrtvxwz]l|sth|kpy|ww|hh|jj|kk|qq|vv|xx).*\\b"
    URL_VERBATIM_TOKENS: [ "dcfaq", "ny.gov", "nys", "dol", "ny", "gov", "po", "nysdol" ]
    CUSTOM_MATCH_REPLACE_LIST: [{
        # replace periods after previously processed URLs with sentences tags so we get an appropriate pause instead of saying "dot"
        languages: "all",
        match: ">\\s*\\.(?!\\s*<\\/)",
        replace: "><s></s>"
    }, {
        # wrap $session.params.recent-year with SSML so it is pronounced correctly
        languages: "all",
        match: "\\$session.params.recent-year\\b",
        replace: "<say-as interpret-as=\"date\" format=\"yyyy\">$session.params.recent-year</say-as> "
    }, {
        # wrap $flow.requested-year with SSML so it is pronounced correctly
        languages: "all",
        match: "\\$flow.requested-year\\b",
        replace: "<say-as interpret-as=\"date\" format=\"yyyy\">$flow.requested-year</say-as> "
    }, {
        # wrap $flow.1099g-year with SSML so it is pronounced correctly
        languages: "all",
        match: "\\$flow.1099g-year\\b",
        replace: "<say-as interpret-as=\"date\" format=\"yyyy\">$flow.1099g-year</say-as> "
    }, {
        # wrap function for year with SSML so it is pronounced correctly
        languages: "en",
        match: "\\$sys.func.IF\\(\"\\$sys.func.COUNT\\(\\$flow.available-years\\) > 2\", \\$sys.func.JOIN\\(\", \", \\$flow.available-years, \", and \"\\), \\$sys.func.JOIN\\(\" and \", \\$flow.available-years\\)\\)",
        replace: "<say-as interpret-as=\"date\" format=\"yyyy\">$sys.func.IF(\"$sys.func.COUNT($flow.available-years) > 2\", $sys.func.JOIN(\", \", $flow.available-years, \", and \"), $sys.func.JOIN(\" and \", $flow.available-years))</say-as> "
    }, {
        # wrap function for year with SSML so it is pronounced correctly
        languages: "en",
        match: "\\$sys.func.IF\\(\"\\$sys.func.COUNT\\(\\$flow.requested-years\\) > 2\", \\$sys.func.JOIN\\(\", \", \\$flow.requested-years, \", and \"\\), \\$sys.func.JOIN\\(\" and \", \\$flow.requested-years\\)\\)",
        replace: "<say-as interpret-as=\"date\" format=\"yyyy\">$sys.func.IF(\"$sys.func.COUNT($flow.requested-years) > 2\", $sys.func.JOIN(\", \", $flow.requested-years, \", and \"), $sys.func.JOIN(\" and \", $flow.requested-years))</say-as> "
    }, {
        # wrap $session.params.data-collection-dmv-id with SSML so it is pronounced correctly
        languages: "all",
        match: "\\$session.params.data-collection-dmv-id",
        replace: "<say-as interpret-as=\"verbatim\">$session.params.data-collection-dmv-id</say-as> "
    }, {
        # wrap $session.params.data-collection-dmv-doc-id with SSML so it is pronounced correctly
        languages: "all",
        match: "\\$session.params.data-collection-dmv-doc-id",
        replace: "<say-as interpret-as=\"verbatim\">$session.params.data-collection-dmv-doc-id</say-as> "
    }, {
        # wrap DD214 with SSML to pronounce correctly
        languages: "all",
        match: "[dD][dD]-*214",
        replace: "<say-as interpret-as=\"verbatim\">DD214</say-as> "
    }, {
        # add break time after 1099-G it reads naturally
        languages: "en",
        match: "1099(-){0,1}\\s*[Gg]\\s*",
        replace: "1099-G <break time=\"300ms\"/> "
    }, {
        languages: "en",
        match: "\\s4320",
        replace: " <say-as interpret-as=\"verbatim\">4320</say-as> "
    }, {
        # reformat "partialui" so it is pronounced "partial you eye" rather than "partial ooo eee"
        languages: "en",
        match: "partialui",
        replace: "partial U I "
    }, {
        # make PIN lowercase so it is read as the word pin and not the letters
        languages: "en",
        match: "PIN",
        replace: "pin "
    }, {
        # space out DOL so it is read as the letters in all languages
        languages: "all",
        match: "DOL",
        replace: "D O L "
    }, {
        # replace NY in non-English languages with N Y
        languages: "all",
        match: ", NY\\s*",
        replace: ", N Y "
    }, {
        # replace NY in English addresses with New York
        languages: "en",
        match: ", N Y\\s*",
        replace: ", New York "
    }, {
        # spell out "Albany" for all languages except English
        languages: "all",
        match: "Albany",
        replace: "A l b a n y "
    }, {
        languages: "en",
        match: "A l b a n y",
        replace: "Albany "
    }, {
        languages: "es",
        match: "A l b a n y",
        replace: "Albani "
    }]
}